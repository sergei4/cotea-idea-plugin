package %package%

import android.util.Log
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import %tea_package%.*
import %cotea_base_package%.store.Store
import kotlinx.coroutines.CoroutineExceptionHandler
import kotlinx.coroutines.flow.MutableSharedFlow
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.asSharedFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.flow.launchIn
import kotlinx.coroutines.flow.onEach

class %viewModelClass%(
    storeFactory: %factoryClass% = %factoryClass%(
        stateUpdater = %stateUpdaterClass%(),
        commandHandler = %commandHandlerClass%(),
        transitionListener = %analyticClass%()
    )
): ViewModel() {

    private val _state = MutableStateFlow(%stateClass%())
    val state = _state.asStateFlow()

    private val _sideEffect = MutableSharedFlow<%sideEffectClass%>()
    val sideEffect = _sideEffect.asSharedFlow()

    private val uiMessage = MutableSharedFlow<%messageClass%>()

    private val store: Store<%messageClass%, %stateClass%, %sideEffectClass%, %commandClass%> =
        storeFactory.createStore(::%stateClass%)

    init {
        collectUiEvent()
    }

    private fun collectUiEvent() {
        val coroutineExceptionHandler = CoroutineExceptionHandler { coroutineContext, throwable ->
            Log.d("CoTea", "coroutineContext = $coroutineContext : throwable = $throwable")
        }

        uiMessage
            .onEach(store::onMessage)
            .launchIn(viewModelScope)

        store.start(
            coroutineScope = viewModelScope,
            coroutineExceptionHandler = coroutineExceptionHandler,
            actionState = _state::emit,
            actionSideEffect = _sideEffect::emit
        )
    }
}